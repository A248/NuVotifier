import com.github.jengelman.gradle.plugins.shadow.relocation.SimpleRelocator

import java.nio.file.FileAlreadyExistsException
import java.nio.file.Files
import java.nio.file.Paths
import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    implementation project(":nuvotifier-api")
    implementation project(":nuvotifier-common")
    implementation project(":nuvotifier-bukkit")
    implementation project(":nuvotifier-bungeecord")
    implementation project(":nuvotifier-sponge")
    implementation project(":nuvotifier-velocity")
}

shadowJar {
    archiveBaseName = 'nuvotifier'
    relocate "io.netty", "com.vexsoftware.votifier.netty"
    relocate "org.json", "com.vexsoftware.votifier.json"
    relocate new SimpleRelocator("com.google.code", "com.vexsoftware.votifier.google.code", new ArrayList<String>(), Collections.singletonList("com.vexsoftware.votifier.sponge"))
    relocate "org.apache.commons.io", "com.vexsoftware.votifier.commons.io"
}

artifacts {
    tasks.shadowJar.outputs.files.each {
        archives(it) {
            builtBy shadowJar
        }
    }
}

def artifactPattern = Pattern.compile(/(.*)-([0-9]+\.)*[0-9]+(-SNAPSHOT)?\.jar/)

task('linkLatest') {
    dependsOn tasks.shadowJar
    doLast {
        tasks.shadowJar.outputs.files.each {
            System.println(it.absolutePath)
            def noVerMatcher = artifactPattern.matcher(it.absolutePath)
            if (!noVerMatcher.matches())
                throw new IllegalStateException("wtf")

            def noVer = Paths.get(noVerMatcher.group(1) + ".jar")
            def versnd = it.toPath()
            try {
                Files.createSymbolicLink(noVer, versnd)
            } catch (FileAlreadyExistsException ignored) {}
        }
    }
}

build.dependsOn linkLatest
